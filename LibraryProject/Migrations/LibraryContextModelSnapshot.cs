// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryProject.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActivityRole", b =>
                {
                    b.Property<int>("ActivitiesID")
                        .HasColumnType("int");

                    b.Property<int>("RolesID")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesID", "RolesID");

                    b.HasIndex("RolesID");

                    b.ToTable("ActivityRole");
                });

            modelBuilder.Entity("BookWriter", b =>
                {
                    b.Property<int>("BooksID")
                        .HasColumnType("int");

                    b.Property<int>("WritersID")
                        .HasColumnType("int");

                    b.HasKey("BooksID", "WritersID");

                    b.HasIndex("WritersID");

                    b.ToTable("BookWriter");
                });

            modelBuilder.Entity("CommunicationPerson", b =>
                {
                    b.Property<int>("CommunicationsID")
                        .HasColumnType("int");

                    b.Property<int>("PeopleID")
                        .HasColumnType("int");

                    b.HasKey("CommunicationsID", "PeopleID");

                    b.HasIndex("PeopleID");

                    b.ToTable("CommunicationPerson");
                });

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("ActivityDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActivityName")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActivityName")
                        .IsUnique();

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivityDescription = "دسترسی به منوی مدیریت اطلاعات",
                            ActivityName = 10
                        },
                        new
                        {
                            ID = 2,
                            ActivityDescription = "دسترسی به منوی مدیریت امانت",
                            ActivityName = 20
                        },
                        new
                        {
                            ID = 3,
                            ActivityDescription = "دسترسی به منوی گزارش گیری",
                            ActivityName = 30
                        },
                        new
                        {
                            ID = 4,
                            ActivityDescription = "دسترسی به منوی مدیریت نرم افزار ",
                            ActivityName = 40
                        },
                        new
                        {
                            ID = 5,
                            ActivityDescription = "دسترسی به منوی مدیریت امنیت",
                            ActivityName = 50
                        });
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Stamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookName")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Domain.Entities.Communication", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunicationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CommunicationTypeID");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("Domain.Entities.CommunicationType", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CommunicationTypeName")
                        .IsUnique();

                    b.ToTable("CommunicationTypes");

                    b.HasData(
                        new
                        {
                            ID = 10,
                            CommunicationTypeName = "همراه"
                        },
                        new
                        {
                            ID = 20,
                            CommunicationTypeName = "تلفن"
                        },
                        new
                        {
                            ID = 30,
                            CommunicationTypeName = "پست الکترونیکی"
                        },
                        new
                        {
                            ID = 40,
                            CommunicationTypeName = "اینیستاگرام"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FormBorrow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("NumberofDay")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.HasIndex("MemberID");

                    b.ToTable("FormBorrows");
                });

            modelBuilder.Entity("Domain.Entities.Major", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("MajorName")
                        .IsUnique();

                    b.ToTable("Majors");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            MajorName = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MajorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MemberDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("ProofID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MajorID");

                    b.HasIndex("PersonID");

                    b.HasIndex("ProofID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("NationalCode")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("NationalCode")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("Domain.Entities.PersonPicture", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.ToTable("PersonPicture");
                });

            modelBuilder.Entity("Domain.Entities.Proof", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("ProofName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ProofName")
                        .IsUnique();

                    b.ToTable("Proofs");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            ProofName = ""
                        },
                        new
                        {
                            ID = 10,
                            ProofName = "زیر دیپلم"
                        },
                        new
                        {
                            ID = 20,
                            ProofName = "دیپلم"
                        },
                        new
                        {
                            ID = 30,
                            ProofName = "کاردانی"
                        },
                        new
                        {
                            ID = 40,
                            ProofName = "کارشناسی"
                        },
                        new
                        {
                            ID = 50,
                            ProofName = "کارشناسی ارشد"
                        },
                        new
                        {
                            ID = 60,
                            ProofName = "دکتری"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("SubjectName")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Writer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("RolesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ActivityRole", b =>
                {
                    b.HasOne("Domain.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookWriter", b =>
                {
                    b.HasOne("Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationPerson", b =>
                {
                    b.HasOne("Domain.Entities.Communication", null)
                        .WithMany()
                        .HasForeignKey("CommunicationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Communication", b =>
                {
                    b.HasOne("Domain.Entities.CommunicationType", "CommunicationType")
                        .WithMany("Communications")
                        .HasForeignKey("CommunicationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");
                });

            modelBuilder.Entity("Domain.Entities.FormBorrow", b =>
                {
                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany("FormBorrows")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany("FormBorrows")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Major", "Major")
                        .WithMany("Members")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Proof", "Proof")
                        .WithMany("Members")
                        .HasForeignKey("ProofID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Person");

                    b.Navigation("Proof");
                });

            modelBuilder.Entity("Domain.Entities.PersonPicture", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithOne("PersonPicture")
                        .HasForeignKey("Domain.Entities.PersonPicture", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Writer", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Navigation("FormBorrows");
                });

            modelBuilder.Entity("Domain.Entities.CommunicationType", b =>
                {
                    b.Navigation("Communications");
                });

            modelBuilder.Entity("Domain.Entities.Major", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Navigation("FormBorrows");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("PersonPicture");
                });

            modelBuilder.Entity("Domain.Entities.Proof", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
